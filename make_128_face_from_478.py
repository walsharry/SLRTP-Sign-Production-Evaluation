# select the correct keypoint for the face
face_478_to_128 = [
    0,
    7,
    10,
    13,
    14,
    17,
    21,
    33,
    37,
    39,
    40,
    46,
    52,
    53,
    54,
    55,
    58,
    61,
    63,
    65,
    66,
    67,
    70,
    78,
    80,
    81,
    82,
    84,
    87,
    88,
    91,
    93,
    95,
    103,
    105,
    107,
    109,
    127,
    132,
    133,
    136,
    144,
    145,
    146,
    148,
    149,
    150,
    152,
    153,
    154,
    155,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    172,
    173,
    176,
    178,
    181,
    185,
    191,
    234,
    246,
    249,
    251,
    263,
    267,
    269,
    270,
    276,
    282,
    283,
    284,
    285,
    288,
    291,
    293,
    295,
    296,
    297,
    300,
    308,
    310,
    311,
    312,
    314,
    317,
    318,
    321,
    323,
    324,
    332,
    334,
    336,
    338,
    356,
    361,
    362,
    365,
    373,
    374,
    375,
    377,
    378,
    379,
    380,
    381,
    382,
    384,
    385,
    386,
    387,
    388,
    389,
    390,
    397,
    398,
    400,
    402,
    405,
    409,
    415,
    454,
    466,
]


def make_128_face_from_478(face: torch.Tensor):
    # select the keypoints that are needed for the 128 face
    face = face[:, face_478_to_128, ...]
    # order the keypoints
    mapping = tuple(order_128.items())
    # sort mapping by v[0]
    _face = torch.zeros_like(face)
    for a, b in mapping:
        _face[:, b, ...] = face[:, a, ...]
    return _face


if __name__ == '__main__':

    # Face Mesh model
    # face_mesh = mp_face_mesh.FaceMesh(
    #     refine_landmarks=True,
    #     min_detection_confidence=0.2,
    #     min_tracking_confidence=0.2)
    
    # Example 
    face_old = torch.tensor((N, 478, 3))
    face = make_128_face_from_478(face_old)